import requests
import bs4
import json
from django.http import HttpResponse

# It does not need pandas

# It looks for a country you enter
#country_name=input("Enter the Country name: ")

def show_countries(request, country):
    #res = requests.get("https://www.worldometers.info/coronavirus/#countries")
    #soup = bs4.BeautifulSoup(res.text, 'lxml')
    #index = -1
    """


    """
    data=""
    print("-----------------------------")
    print("data")
    

    data_country = {
        "country_name":country,
        "total_cases":7342359,
        "new_cases":31527,
        "total_deaths":414124,
        "new_deaths":1152,
        "total_Recovered":3619774,
        "active_cases":3308461,
        "historical":{
            "cases": {
                "5/25/20": 21981,
                "5/26/20": 23003,
                "5/27/20": 24104,
                "5/28/20": 24141,
                "5/29/20": 25406,
                "5/30/20": 26734,
                "5/31/20": 27219,
                "6/1/20": 29384,
                "6/2/20": 30593,
                "6/3/20": 31935,
                "6/4/20": 33466,
                "6/5/20": 36759,
                "6/6/20": 36759,
                "6/7/20": 38149,
                "6/8/20": 40847,
                "6/9/20": 40847,
                "6/10/20": 42206,
                "6/11/20": 43810,
                "6/12/20": 45344,
                "6/13/20": 46994,
                "6/14/20": 48896,
                "6/15/20": 53168,
                "6/16/20": 53211,
                "6/17/20": 55083,
                "6/18/20": 57202,
                "6/19/20": 60387,
                "6/20/20": 63454,
                "6/21/20": 68836,
                "6/22/20": 71367,
                "6/23/20": 73760
            },
            "deaths": {
                "5/25/20": 750,
                "5/26/20": 776,
                "5/27/20": 803,
                "5/28/20": 833,
                "5/29/20": 855,
                "5/30/20": 891,
                "5/31/20": 916,
                "6/1/20": 963,
                "6/2/20": 1014,
                "6/3/20": 1057,
                "6/4/20": 1099,
                "6/5/20": 1204,
                "6/6/20": 1204,
                "6/7/20": 1265,
                "6/8/20": 1373,
                "6/9/20": 1373,
                "6/10/20": 1439,
                "6/11/20": 1505,
                "6/12/20": 1562,
                "6/13/20": 1623,
                "6/14/20": 1670,
                "6/15/20": 1808,
                "6/16/20": 1808,
                "6/17/20": 1887,
                "6/18/20": 1955,
                "6/19/20": 2046,
                "6/20/20": 2148,
                "6/21/20": 2353,
                "6/22/20": 2426,
                "6/23/20": 2524
            },
            "recovered": {
                "5/25/20": 5265,
                "5/26/20": 5511,
                "5/27/20": 6111,
                "5/28/20": 6132,
                "5/29/20": 6687,
                "5/30/20": 6935,
                "5/31/20": 7032,
                "6/1/20": 8384,
                "6/2/20": 9689,
                "6/3/20": 11171,
                "6/4/20": 12319,
                "6/5/20": 13670,
                "6/6/20": 13670,
                "6/7/20": 14414,
                "6/8/20": 16459,
                "6/9/20": 16459,
                "6/10/20": 16566,
                "6/11/20": 17366,
                "6/12/20": 17823,
                "6/13/20": 18749,
                "6/14/20": 19460,
                "6/15/20": 19985,
                "6/16/20": 19986,
                "6/17/20": 20400,
                "6/18/20": 21361,
                "6/19/20": 22726,
                "6/20/20": 24035,
                "6/21/20": 27412,
                "6/22/20": 29024,
                "6/23/20": 30517
            }
        }
    }

    print(data_country)

    return HttpResponse(json.dumps(data_country))